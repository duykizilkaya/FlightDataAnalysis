# -*- coding: utf-8 -*-
"""flight_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XCq9GtMAJtzzFMmkUSFIYdOjA7aJ99Jr
"""

# Verarbeitung von Daten über Flüge mit 3 Millionen Zeilen.
# Analysieren und visualisieren dieser Daten, Versuche verschiedene Korrelationen zu finden.
# Bereinigung dieser Datei, um bessere Ergebnisse zu erzielen.

from google.colab import drive

drive.mount("/content/MyDrive")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import scipy as sp
from scipy.stats import chi2_contingency
from scipy import stats

try:

  file_name = input("Please provide your file name ")

  if file_name == "":
    file_name = "flight_data.csv"
  elif "flight" or "flight_data" in file_name:
    file_name = "flight_data.csv"
  else:
    pass

  df = pd.read_csv(f"/content/MyDrive/MyDrive/{file_name}")

except FileNotFoundError:
  print("This file cannot be found.")

df.isnull().sum()

# Drop rows with missing values

while True:

  df = df.dropna(axis=0, subset=['CRS_ELAPSED_TIME'])

  break

print(len(df))

def format_time(time_str):
    return time_str[:2] + ":" + time_str[2:]

df['DEP_TIME'] = df['DEP_TIME'].astype(str)
df['DEP_TIME'] = df['DEP_TIME'].apply(format_time)

df['CRS_DEP_TIME'] = df['CRS_DEP_TIME'].astype(str)
df['CRS_DEP_TIME'] = df['CRS_DEP_TIME'].apply(format_time)

df['WHEELS_OFF'] = df['WHEELS_OFF'].astype(str)
df['WHEELS_OFF'] = df['WHEELS_OFF'].apply(format_time)

df['WHEELS_ON'] = df['WHEELS_OFF'].astype(str)
df['WHEELS_ON'] = df['WHEELS_OFF'].apply(format_time)

df['CRS_ARR_TIME'] = df['CRS_ARR_TIME'].astype(str)
df['CRS_ARR_TIME'] = df['CRS_ARR_TIME'].apply(format_time)

df['ARR_TIME'] = df['ARR_TIME'].astype(str)
df['ARR_TIME'] = df['ARR_TIME'].apply(format_time)


print(df.dtypes)

print(df.dtypes)

# How many 0 and 1 have binary columns?

counts = df['CANCELLED'].value_counts()
print(counts)

counts = df['DIVERTED'].value_counts()
print(counts)

# Calculate overall counts of cancelled and non-cancelled flights
overall_counts = df['CANCELLED'].value_counts()

# Calculate the proportion of cancelled flights
cancelled_proportion = overall_counts[1] / overall_counts.sum()

# Create a pie chart
labels = ['Not Cancelled', 'Cancelled']
sizes = [overall_counts[0], overall_counts[1]]
colors = ['lightblue', 'lightcoral']
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Proportion of Cancelled Flights')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Get unique values

unique_values = set(df['AIRLINE_CODE'])
print("Unique values in the column:")
print(unique_values)
print(f"Number of unique values: {len(unique_values)}")

# Group by airport and calculate total cancelled flights for each airport
cancelled_counts = df.groupby('AIRLINE_CODE')['CANCELLED'].sum()

# Sort airports based on the number of cancelled flights
cancelled_counts_sorted = cancelled_counts.sort_values(ascending=False)
dict_cancelled_count = cancelled_counts_sorted.to_dict()

# Get the top 3 airports with the highest number of cancellations
top_3_cancelled_airports = cancelled_counts_sorted.head(3)

print("Cancelled Flights at the Airports:")
print(dict_cancelled_count)
print("Top 3 airports with the highest number of cancelled flights:")
print(top_3_cancelled_airports)

# Calculate total cancellations per airline
cancelled_counts_1 = df.groupby('AIRLINE_CODE')['CANCELLED'].sum()

# Calculate total flights per airline
total_flights_1 = df.groupby('AIRLINE_CODE')['CANCELLED'].count()

# Calculate the proportion of cancelled flights per airline
cancelled_proportion_1 = cancelled_counts_1 / total_flights_1

# Create a bar plot of cancelled flight proportions
plt.figure(figsize=(10, 6))
cancelled_proportion_1.plot(kind='bar', color='red')
plt.title('Proportion of Cancelled Flights by Airline')
plt.xlabel('Airline Code')
plt.ylabel('Proportion of Cancelled Flights')
plt.ylim(0, 0.1)  # Set y-axis limit to ensure proper visualization of proportions
plt.show()

# Create a contingency table (cross-tabulation)
contingency_table_1 = pd.crosstab(df['AIRLINE_CODE'], df['CANCELLED'])

# Perform Chi-square test for independence
chi2, p, dof, expected = chi2_contingency(contingency_table_1)

print(f"Chi-square statistic: {chi2}")
print(f"P-value: {p}"),
print(f"Degrees of freedom: {dof}")

# Count the number of unique departure airports
num_unique_departure_airports = df['ORIGIN'].nunique()

print(f"Number of unique departure cities: {num_unique_departure_airports}")

# Calculate total cancellations per airport
cancelled_counts_2 = df.groupby('ORIGIN')['CANCELLED'].sum()

# Calculate total flights per airline
total_flights_2 = df.groupby('ORIGIN')['CANCELLED'].count()

# Calculate the proportion of cancelled flights per airline
cancelled_proportion_2 = cancelled_counts_2 / total_flights_2

# Create a bar plot of cancelled flight proportions
plt.figure(figsize=(10, 6))
cancelled_proportion_2.plot(kind='line', color='red')
plt.title('Proportion of Cancelled Flights by Airport')
plt.xlabel('Airport')
plt.ylabel('Proportion of Cancelled Flights')
plt.ylim(0, 0.2)
plt.show()

contingency_table_2 = pd.crosstab(df['ORIGIN'], df['CANCELLED'])

# Perform the Chi-Square test
chi2, p, dof, expected = chi2_contingency(contingency_table_2)

print(f"Chi-square statistic: {chi2}")
print(f"P-value: {p}")
print(f"Degrees of freedom: {dof}")
#print("Expected frequencies:")
#print(expected)

print(df['ARR_DELAY'].mean())

mean_delayed_by_airline = df.groupby('AIRLINE_CODE')['ARR_DELAY'].mean()

print(mean_delayed_by_airline)

class Anova:
  def __init__(self, df, col1: str = "ARR_DELAY", col2: str = "AIRLINE_CODE"):
    self.df = df[[col1, col2]]
    self.airlines = ['UA', 'DL', 'NK', 'AA', 'YX', 'AS', 'WN', 'B6', 'OH', 'G4',
                     'EV', 'OO', '9E', 'MQ', 'F9', 'YV', 'QX', 'HA']
    self.col1 = col1
    self.col2 = col2

  def filter_data(self):
    df_col = self.df[self.col1]

    self.df['z_score'] = (df_col - df_col.mean()) / df_col.std()

    df_no_outliers = self.df[np.abs(self.df['z_score']) <= 3]
    df_no_outliers = df_no_outliers.drop(columns=['z_score'])
    self.df = df_no_outliers

  def mean(self):
    df_col = self.df[self.col1]
    return df_col.mean()

  def plot_maker(self):

    df_col = self.df[self.col1]
    df_col = self.df[self.col1]
    plt.figure(figsize=(12, 6))
    sns.boxplot(x = df_col)
    plt.title('Box plot after removing outliers')

    return plt.show()

  def anova_stats(self):
    delay_times = list()
    for code in self.airlines:
      airline_delay= self.df[self.df[self.col2] == code][self.col1]
      delay_times.append(airline_delay)

    anova_result = stats.f_oneway(*delay_times)

    return f"ANOVA test result: F-statistic = {anova_result.statistic}, p-value = {anova_result.pvalue}"

analysis = Anova(pd.read_csv(f"/content/MyDrive/MyDrive/flight_data.csv"))

analysis.filter_data()

print(analysis.mean())

analysis.anova_stats()

analysis.plot_maker()

df['FL_DATE'] = pd.to_datetime(df['FL_DATE'])

df['YEAR'] = df['FL_DATE'].dt.year

the_head_3_airlines_with_cancellation_numbers = df.loc[df['AIRLINE_CODE'].isin(['AA','OO',"WN"])]

overall_counts_cancelled = the_head_3_airlines_with_cancellation_numbers.groupby(['YEAR', 'AIRLINE_CODE'])['CANCELLED'].sum()
overall_counts = the_head_3_airlines_with_cancellation_numbers.groupby(['YEAR','AIRLINE_CODE'])['CANCELLED'].count()

# Calculate the proportion of cancelled flights per airline
cancelled_proportion_2 = overall_counts_cancelled / overall_counts

cancelled_proportion_2 = cancelled_proportion_2.unstack()

print(cancelled_proportion_2)

# Create a contingency table (cross-tabulation)
contingency_table_flight = pd.crosstab(df["YEAR"], the_head_3_airlines_with_cancellation_numbers["AIRLINE_CODE"])

print(contingency_table_flight)

# Perform Chi-square test for independence
chi2, p, dof, expected = chi2_contingency(cancelled_proportion_2)

print(f"Chi-square statistic: {chi2}")
print(f"P-value: {p}")
print(f"Degrees of freedom: {dof}")

cancelled_proportion_2.plot(kind='line', figsize=(12, 8), stacked=True)

plt.title('Number of Cancellations by Year and Airline in the Top Three Cancelled Airline')
plt.xlabel('Year')
plt.ylabel('Number of Cancellations')
plt.legend(title='Airline Code')
plt.show()